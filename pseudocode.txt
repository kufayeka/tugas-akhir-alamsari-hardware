proses read_sensor "mengubah" variable temp1, hum1
proses calculate_pid_output "membutuhkan" variable hum1, kp, ki untuk menghitung output yang nanti "mengubah" variable outputPID
proses PWM "membutuhkan" variable outputPID
proses mqtt_conn "mengubah" variable kp, ki dan "membutuhkan" temp1, hum1 untuk dipublish ke server sebagai monitoring


write me a 3 simple python module like this below:

globals.py: define A variable
main.py: print A variable value from globals.py every 1 seconds
incrementer.py: add A variable + 1 in globals.py every 1 seconds



write me a simple python program that creates new record in sqlite3 table every second.

I want the record style to be like this:
value           | timestamp
random_value    | current_timestamp

and everytime I run the script, it creates new sqlite3 db file named: data_klimat_$timestamp(tanggal, jam saat script dijalankan).db



write me a raspi python script that gives this options:

- kp
- ki
- kd 
- set_point 
- max_interval
- min_interval 

and when I selected one for example set_point, it prompts me with "change value to:" and when I enter the value and press enter, the value get saved into a variable named set_point
do the same for each option


how can I implement this python multiprocessing code below

variable1 = 0.1
variable2 = 0.7

process_1():
    while true:
        print(variable1)
        print(variable2)
        sleep(1)

process_2():
    while true:
        read sensor -> variable1, variable2
        sleep(3)


so lets say i have this multiprocessing program:


def process_1:
    while True:
        read_sensor()
        sleep(1)

def process_2:
    while true:
        print(humidity1)
        sleep(5)

how can I access the returned read_sensor values in this process_2?


help me with this:

client = mqtt.Client(client_id="1n!Cl1n3t1D_", clean_session=True, userdata=None, transport="tcp")
client.username_pw_set(broker_username, broker_password)

def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    #client.subscribe("$SYS/#")
    client.subscribe("paho/temperature")

def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload))

def publish_msg(data):
    client.publish("paho/temperature", data, 0, False)
    print("process4 running", data)

client.on_connect = on_connect
client.on_message = on_message

client.connect(broker_address, 1883, 60)
client.loop_start()

how can make the publish_msg method able to use the client? I want to publish an mqtt message
I was able to publish an mqtt message if the client.publish("paho/temperature", data, 0, False) placed in on_connect method

from time import sleep
import RPi.GPIO as GPIO

try:  
    while True:  
        mqttClass.publish(xxxxx)
  
except KeyboardInterrupt:  
    print("interuptted")
    mqttClass.stop()
  
except:  
    print("error")
  
finally:  
    GPIO.cleanup() # this ensures a clean exit
    mqttClass.stop()


i wanna implement this code:
    schedule.every(1).second.do(print("btch"))
    while True:
        schedule.run_pending()
        time.sleep(1)

        in this program below:


    if __name__ == '__main__':
    p1 = multiprocessing.Process(target=process1, args=())
    p2 = multiprocessing.Process(target=process2, args=(gv.temp1, gv.PID_kp, gv.PID_ki, gv.PID_kd, gv.PID_pv, gv.PID_output, gv.PID_set_point, gv.PWM_enabled, gv.PWM_max_interval, gv.PWM_min_interval, gv.PWM_high_time, gv.PWM_low_time,))
    p3 = multiprocessing.Process(target=process3, args=(gv.PWM_enabled, gv.PWM_high_time, gv.PWM_low_time,))
    p4 = multiprocessing.Process(target=process4, args=(mqtt_instance,))
    p5 = multiprocessing.Process(target=process5, args=())

    try:
        print("STARTING...")
        GPIO.output(relayPin, GPIO.LOW)
        p1.start()
        p2.start()
        p3.start()
        p4.start()
        # p5.start()

        p1.join()
        p2.join()
        p3.join()
        p4.join()
        # p5.join()

    except KeyboardInterrupt:
        GPIO.cleanup()
        p1.terminate()
        p2.terminate()
        p3.terminate()
        p4.terminate()
        # p5.terminate()

    finally:
        mqtt_instance.stop()

        GPIO.cleanup()  # this ensures a clean exit

        print("TERMINATED...")
        time.sleep(0.1)


        how can I do that in process1?

can you convert this program multiprocessings into threading and can still use the gv variables?

#!/usr/bin/env python3
import datetime
import global_variables
import multiprocessing
import openpyxl
import RPi.GPIO as GPIO
import schedule
import time

from climate_sensors import read_climate_sensors
from mqtt import MQTTModuleClass
from simple_pid import PID

# setup GPIO
relayPin = 12
GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD)
GPIO.setup(relayPin, GPIO.OUT)

# setup pid
pid = PID(0.5, 0.05, 0.01)
pid.output_limits = (0, 100)
pid.sample_time = 0.01
pid.auto_mode = True
pid.proportional_on_measurement = False
pid.differential_on_measurement = True

# mqtt configurations
broker_address = "192.168.43.38"
#broker_address = "broker.hivemq.com"
broker_username = "petra_mqtt_broker"
broker_password = "petraMqttBroker777"

# multiprocessing variables manager
manager = multiprocessing.Manager()

mqtt_instance = None

def connect_to_broker():
    while True:
        try:
            instance = MQTTModuleClass(broker_address, broker_username, broker_password)
            instance.subscribe_topic("pussy_wet")
            return True, instance
        except Exception as e:
            print("Failed to connect to the MQTT broker:", str(e))
            time.sleep(3)

# map/scale PID output into 0 - 100 range
def map_range(value, inMin, inMax, outMin, outMax):
    result = outMin + (((value - inMin) / (inMax - inMin)) * (outMax - outMin))
    return result

def process1(gv):
    def sensors_job():
        # read RS485 climate sensors
        read_climate_sensors()
        timestamp = datetime.datetime.now().strftime('%H:%M:%S')  # Get the current timestamp
        print("____________________________________")
        print(f"Current Sensor Readings: ({timestamp})")
        print(f"\tTemp 1:{gv.temp1.get():.3f} | Hum 1:{gv.hum1.get():.3f}")
        print(f"\tTemp 2:{gv.temp2.get():.3f} | Hum 2:{gv.hum2.get():.3f}")
        print()
        print(f"PID Parameters: kp:{gv.PID_kp.get()} | ki:{gv.PID_ki.get()} | kd:{gv.PID_kd.get()}")
        print("PID PV:", gv.PID_pv.get())
        print("PID Set Point:", gv.PID_set_point.get())
        print(f"PID Output: {gv.PID_output.get():.3f}")
        print()
        print("PWM Timing / DutyCycle (secs): ")
        print(f"\tHigh Time:{gv.PWM_high_time.get():.3f} | Low Time:{gv.PWM_low_time.get():.3f}")

    while True:
        sensors_job()
        time.sleep(1)

def process2(gv):
    while True:

        # calculate PID out based on feedback value (humidity/temperature)
        feedback = gv.temp1.get()
        set_point = gv.PID_set_point.get()

        pid.setpoint = set_point
        pid_out = pid(feedback)

        # update tuning with the newest setting while system is running
        pid.tunings = (gv.PID_kp.get(), gv.PID_ki.get(), gv.PID_kd.get())
        p, i, d = pid.components

        # set the pv variable based on hum1 value
        gv.PID_pv.set(round(feedback, 3))
        gv.PID_output.set(round(pid_out, 3))

        # convert PID output to GPIO high and low time range (relayPin)
        # maximum interval ON = 10 seconds
        max_interval = gv.PWM_max_interval.get()
        min_interval = gv.PWM_min_interval.get()
        swap_intervals = False

        if swap_intervals:
            min_interval, max_interval = max_interval, min_interval

        high_time = map_range(pid_out, 0, 100, min_interval, max_interval)
        low_time = map_range(pid_out, 0, 100, max_interval, min_interval)

        # set the PWM timing variable based on map calculation value
        gv.PWM_high_time.set(high_time)
        gv.PWM_low_time.set(low_time)

        # guard PWM
        if low_time < 0:
            gv.PWM_enabled.set(0)
        else:
            gv.PWM_enabled.set(1)

def process3(gv):
    while True:
        if gv.PWM_enabled.get() == 1:
            # set the relayPin to HIGH as long as the PWM_high_time.value
            GPIO.output(relayPin, GPIO.LOW) 
            time.sleep(gv.PWM_high_time.get()) 
            # if PWM_low_time.value != 0, set the relayPin to LOW as long as the PWM_high_time.value
            if gv.PWM_low_time.get() != 0:
                GPIO.output(relayPin, GPIO.LOW) 
                time.sleep(gv.PWM_low_time.get()) 
        # if PWM_enabled.value == 0, set relayPin to LOW
        else: 
            GPIO.output(relayPin, GPIO.LOW) 
            time.sleep(1)

def process4():
    mqtt_is_connected, mqtt_instance = connect_to_broker()

    while True:
        if mqtt_is_connected:
            mqtt_instance.publish_message("pussy_wet", "and_moist")
            time.sleep(2)

#############################################################################
if __name__ == '__main__':
    gv = global_variables

    p1 = multiprocessing.Process(target=process1, args=(gv,))
    p2 = multiprocessing.Process(target=process2, args=(gv,))
    p3 = multiprocessing.Process(target=process3, args=(gv,))
    p4 = multiprocessing.Process(target=process4, args=())

    try:
        print("STARTING...")
        GPIO.output(relayPin, GPIO.LOW)
        p1.start()
        p2.start()
        p3.start()
        p4.start()

        p1.join()
        p2.join()
        p3.join()
        p4.join()

    except KeyboardInterrupt:
        GPIO.cleanup()
        p1.terminate()
        p2.terminate()
        p3.terminate()
        p4.terminate()

    finally:
        GPIO.cleanup()  # this ensures a clean exit

        print("TERMINATED...")
        time.sleep(0.1)

this is what's inside global_variables (gv) module:
import multiprocessing

manager = multiprocessing.Manager()

temp1 = manager.Value('d', 0.000)
temp2 = manager.Value('d', 0.000)
hum1 = manager.Value('d', 0.000)
hum2 = manager.Value('d', 0.000)

PID_kp = manager.Value('d', 8.1) # 30 * 0.6 = 18
PID_ki = manager.Value('d', 2.57) # 30 * 1.2 / 420 = 0,086
PID_kd = manager.Value('d', 1.13) # 30 * 420 * 0.075 = 945
PID_set_point = manager.Value('d', 33)
PID_pv = manager.Value('d', 0.000)
PID_output = manager.Value('d', 0.000)

PWM_enabled = manager.Value('d', 1)
PWM_max_interval = manager.Value('d', 5)
PWM_min_interval = manager.Value('d', 0)
PWM_high_time = manager.Value('d', 0.000)
PWM_low_time = manager.Value('d', 0.000)

MQTT_is_connected = manager.Value('d', 0)

